<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kotlin|从入门到放弃</title>
  <subtitle>Kotlin就是爽</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kotlin.xin/"/>
  <updated>2017-06-12T13:38:33.000Z</updated>
  <id>http://kotlin.xin/</id>
  
  <author>
    <name>ahong222</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我想出去看看</title>
    <link href="http://kotlin.xin/2017/06/12/%E6%88%91%E6%83%B3%E5%87%BA%E5%8E%BB%E7%9C%8B%E7%9C%8B/"/>
    <id>http://kotlin.xin/2017/06/12/我想出去看看/</id>
    <published>2017-06-12T13:16:41.000Z</published>
    <updated>2017-06-12T13:38:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>曾经年少，谁没有个梦想，如今而立之年，早已因为生存，磨平了棱角。<br>人生有多长，余下的不过十分之五。剩下的时间，我不想浪费。<br>世界那么大，我想出去看看，但是不是你想看就能看。<br>前进的道路是寂寞的，但不是孤独的，也许某个角落，也有和我一样的人。</p>
<p><img alt="game4.jpg" src="/2017/06/12/我想出去看看/img1.jpg" width="300"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾经年少，谁没有个梦想，如今而立之年，早已因为生存，磨平了棱角。&lt;br&gt;人生有多长，余下的不过十分之五。剩下的时间，我不想浪费。&lt;br&gt;世界那么大，我想出去看看，但是不是你想看就能看。&lt;br&gt;前进的道路是寂寞的，但不是孤独的，也许某个角落，也有和我一样的人。&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="杂" scheme="http://kotlin.xin/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>“kotlin开发Android：开发游戏2048”</title>
    <link href="http://kotlin.xin/2017/06/12/Kotlin%E5%BC%80%E5%8F%91Android%EF%BC%9A%E5%BC%80%E5%8F%91%E6%B8%B8%E6%88%8F2048/"/>
    <id>http://kotlin.xin/2017/06/12/Kotlin开发Android：开发游戏2048/</id>
    <published>2017-06-12T13:13:50.000Z</published>
    <updated>2017-06-12T13:16:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本玩法"><a href="#基本玩法" class="headerlink" title="基本玩法"></a>基本玩法</h2><p>1.经典版是4*4的♦️<br>2.每次滑动后从没有♦️的地方随机生成一个♦️，数据大小一般是2，也可以是4<br>3.每次滑动如果前方非新生成的♦️，大小相同则可以合并，如果前方是空格，则一直往前移动<br>4.最大数达到2048则赢，格子不能滑动也不能合并则游戏结束</p>
<h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><h3 id="算法："><a href="#算法：" class="headerlink" title="算法："></a>算法：</h3><p>1.用一个二维数组存放方格中的数据<br>2.滑动时先根据方向，将数组进行方向变换，使得永远往X轴正向移动<br>如数组向上滑动的处理步骤<br>i.初始状态<br>0,2,0,0<br>0,2,0,0<br>0,0,0,0<br>0,0,0,0<br>ii.转换方向后(向上：顺时针90度)<br>0,0,0,0<br>0,0,2,2<br>0,0,0,0<br>0,0,0,0<br>iii.向右滑动<br>0,0,0,0<br>0,0,0,4<br>0,0,0,0<br>0,0,0,0<br>iiii.恢复原方向(逆时针90度)<br>0,4,0,0<br>0,0,0,0<br>0,0,0,0<br>0,0,0,0</p>
<p>3.移动计算完毕后将方向转换回去<br>4.得到运动轨迹数据，刷新UI</p>
<h3 id="UI"><a href="#UI" class="headerlink" title="UI:"></a>UI:</h3><p>1.主要游戏区域使用一个FrameLayout，当前的♦️都用BlockTextView表示<br>2.♦️的位置使用translationX，translationY调整<br>3.每个♦️做动画时使用Animator来更新translationX或者translationY<br>截图：<br><img src="https://github.com/ahong222/kotlin_2048/blob/master/game1.jpg?raw=true" alt="game1.jpg"></p>
<h2 id="工程地址："><a href="#工程地址：" class="headerlink" title="工程地址："></a>工程地址：</h2><p><a href="https://github.com/ahong222/kotlin_2048" target="_blank" rel="external">https://github.com/ahong222/kotlin_2048</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本玩法&quot;&gt;&lt;a href=&quot;#基本玩法&quot; class=&quot;headerlink&quot; title=&quot;基本玩法&quot;&gt;&lt;/a&gt;基本玩法&lt;/h2&gt;&lt;p&gt;1.经典版是4*4的♦️&lt;br&gt;2.每次滑动后从没有♦️的地方随机生成一个♦️，数据大小一般是2，也可以是4&lt;br&gt;3.每次
    
    </summary>
    
      <category term="kotlin" scheme="http://kotlin.xin/categories/kotlin/"/>
    
    
  </entry>
  
  <entry>
    <title>开发Android：提升Android开发效率</title>
    <link href="http://kotlin.xin/2017/05/25/Kotlin%E5%BC%80%E5%8F%91Android%EF%BC%9A%E6%8F%90%E5%8D%87Android%E5%BC%80%E5%8F%91%E6%95%88%E7%8E%87/"/>
    <id>http://kotlin.xin/2017/05/25/Kotlin开发Android：提升Android开发效率/</id>
    <published>2017-05-24T16:28:49.000Z</published>
    <updated>2017-05-24T16:48:18.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-去掉findViewById"><a href="#1-去掉findViewById" class="headerlink" title="1.去掉findViewById"></a>1.去掉findViewById</h4><p>只需要在App Module的build.gradle 中添加<br>apply plugin: ‘kotlin-android-extensions’//手动添加<br>代码然后就可以这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">override fun onCreate(savedInstanceState: Bundle?) &#123;</div><div class="line">    super.onCreate(savedInstanceState)</div><div class="line">    setContentView(R.layout.activity_kotlin)</div><div class="line">    //直接使用activity_kotlin.xml中的id</div><div class="line">    test.setOnClickListener &#123; view-&gt; onClickTest(view) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>inflate生成的View，也可以直接操作xml中id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">fun onClickTest(view: View):String?&#123;</div><div class="line">    var view:View   = LayoutInflater.from(this).inflate(R.layout.dialog_kotlin,null, false);</div><div class="line">    val text:String = &quot;clicked this is dialog!&quot;;</div><div class="line">    message = text;</div><div class="line">    view.message.setText(message);</div><div class="line">    var dialog: AlertDialog = AlertDialog.Builder(this).setView(view).setPositiveButton(&quot;this&quot;, DialogInterface.OnClickListener &#123; dialog, which -&gt;  onClickDialog(dialog, which, text)&#125;).create();</div><div class="line">    dialog.show();</div><div class="line"></div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-空安全"><a href="#2-空安全" class="headerlink" title="2.空安全"></a>2.空安全</h4><h6 id="i-变量或参数可空用-？标记"><a href="#i-变量或参数可空用-？标记" class="headerlink" title="i. 变量或参数可空用 ？标记"></a>i. 变量或参数可空用 ？标记</h6><p>不可空类型如果设置为空会提示错误<br><img src="http://upload-images.jianshu.io/upload_images/2858322-d009e89ada101923.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-04-04 下午4.15.29.png"></p>
<h6 id="ii-安全调用"><a href="#ii-安全调用" class="headerlink" title="ii.安全调用"></a>ii.安全调用</h6><p>调用可空参数时未加？会提示不安全，？表示非空就返回后面的内容，为空就返回null<br><img src="http://upload-images.jianshu.io/upload_images/2858322-3e58a709f5cd84d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-04-04 下午4.23.52.png"></p>
<h6 id="iii-表达式"><a href="#iii-表达式" class="headerlink" title="iii. ?: 表达式"></a>iii. ?: 表达式</h6><p>表达式左边为非空，为空时‘执行’表达式右边，如右边包含return ，throw Exception等也可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var object1: StaticInnerClass? = null;</div><div class="line">var length3: String = object1?.getNewName() ?: throw RuntimeException(&quot;test&quot;);</div></pre></td></tr></table></figure></p>
<h6 id="iiii-非空强制转换符"><a href="#iiii-非空强制转换符" class="headerlink" title="iiii. !! 非空强制转换符"></a>iiii. !! 非空强制转换符</h6><p><img src="http://upload-images.jianshu.io/upload_images/2858322-d722e60054a23d96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-04-04 下午4.49.47.png"></p>
<h4 id="3-函数扩展"><a href="#3-函数扩展" class="headerlink" title="3.函数扩展"></a>3.函数扩展</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//扩展Context类，增加toast方法</div><div class="line">fun Context.toast(message: String, time: Int) &#123;</div><div class="line">    Toast.makeText(this, message, time).show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">fun onClickTest(view: View):String?&#123;</div><div class="line">    var context: Context = this;</div><div class="line">    context.toast(&quot;toast text&quot;,Toast.LENGTH_SHORT);//调用扩展方法</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在外部扩展，供整个项目使用。新建Kotlin文件，内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.ifnoif.androidtestdemo.kotlin</div><div class="line"></div><div class="line">import android.content.Context</div><div class="line">import android.widget.Toast</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by shen on 17/4/4.</div><div class="line"> */</div><div class="line"></div><div class="line"></div><div class="line">fun Context.toast(message: String, time: Int) &#123;</div><div class="line">    Toast.makeText(this, message, time).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="4-数据类-data-class，巨幅-减少代码"><a href="#4-数据类-data-class，巨幅-减少代码" class="headerlink" title="4.数据类(data class，巨幅 减少代码)"></a>4.数据类(data class，巨幅 减少代码)</h4><p>data class会自动根据构造函数实现equals()/hashCode，toString，还会增加copy方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">data class Car(var name:String,var color:String, var weight:Int)&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fun testCar()&#123;</div><div class="line">    var car:Car = Car(&quot;bus&quot;,&quot;red&quot;,1000);</div><div class="line">    var color = car.color;</div><div class="line">    var name = car.name;</div><div class="line">    var weight = car.weight;</div><div class="line">    var newCar:Car =car.copy(name=&quot;bicycle&quot;,weight = 10);</div><div class="line">    var equalsResult =car.equals(newCar);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="5-lambda-表达式-减少匿名内部类"><a href="#5-lambda-表达式-减少匿名内部类" class="headerlink" title="5. lambda 表达式,减少匿名内部类"></a>5. lambda 表达式,减少匿名内部类</h4><p>看看setOnClickListener怎么写的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">override fun onCreate(savedInstanceState: Bundle?) &#123;</div><div class="line">    super.onCreate(savedInstanceState)</div><div class="line">    setContentView(R.layout.activity_kotlin)</div><div class="line"></div><div class="line">    test.setOnClickListener &#123; view-&gt; onClickTest(view) &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更多Lambda用法参考：<a href="http://www.jianshu.com/p/357e23343858" target="_blank" rel="external">函数式编程之Lambda表达式</a></p>
<h4 id="6-Anko-库，可以让您编写描述性的布局，而无需使用XML"><a href="#6-Anko-库，可以让您编写描述性的布局，而无需使用XML" class="headerlink" title="6.Anko 库，可以让您编写描述性的布局，而无需使用XML"></a>6.Anko 库，可以让您编写描述性的布局，而无需使用XML</h4><p>如在activity中显示一个垂直布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">override fun onCreate(savedInstanceState: Bundle?) &#123;</div><div class="line">    super.onCreate(savedInstanceState) ｛</div><div class="line">        verticalLayout &#123;</div><div class="line">            val name = editText()</div><div class="line">            button(&quot;Say Hello&quot;) &#123;</div><div class="line">                onClick &#123; toast(&quot;Hello, $&#123;name.text&#125;!&quot;) &#125;</div><div class="line">            &#125;</div><div class="line">        ｝</div><div class="line">    &#125;</div><div class="line">｝</div></pre></td></tr></table></figure></p>
<p>需要配置插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;org.jetbrains.anko:anko-sdk15:0.7.1&apos; // sdk19, sdk21, sdk23 are also available</div><div class="line">    compile &apos;org.jetbrains.anko:anko-support-v4:0.7.1&apos; // In case you need support.v4 bindings</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更多Anko相关：<a href="https://github.com/Kotlin/anko" target="_blank" rel="external">https://github.com/Kotlin/anko</a></p>
<h2 id="7-其他特性"><a href="#7-其他特性" class="headerlink" title="7.其他特性"></a>7.其他特性</h2><h3 id="Smart-Casts（智能类型转换）"><a href="#Smart-Casts（智能类型转换）" class="headerlink" title="Smart Casts（智能类型转换）"></a>Smart Casts（智能类型转换）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if (obj is String) &#123;</div><div class="line">    //判断通过后就能使用该类型的API</div><div class="line">    print(obj.length)</div><div class="line">&#125;</div><div class="line"></div><div class="line">//安全的类型转换，类型不匹配则x为null</div><div class="line">var y: Any = 123</div><div class="line">val x: String? = y as? String</div><div class="line">println(&quot;x:&quot;+x+&quot; y:&quot;+y)//输出x:123 y:null</div></pre></td></tr></table></figure>
<h3 id="String-Templates-字符串模板"><a href="#String-Templates-字符串模板" class="headerlink" title="String Templates(字符串模板)"></a>String Templates(字符串模板)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//更容易阅读</div><div class="line">val s = &quot;abc&quot;</div><div class="line">val str = &quot;$s.length is $&#123;s.length&#125;&quot; // 结果&quot;abc.length is 3&quot;</div></pre></td></tr></table></figure>
<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//接口中包含具体的方法,类似java8中Default 方法</div><div class="line">interface Operation &#123;</div><div class="line">    fun add(a: Int, b: Int): Int;</div><div class="line">    fun print()&#123;</div><div class="line">        println(&quot;Operation&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Range-expressions-范围表达式"><a href="#Range-expressions-范围表达式" class="headerlink" title="Range expressions(范围表达式)"></a>Range expressions(范围表达式)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for (i in 1..4) print(i) // prints &quot;1234&quot;</div><div class="line">for (i in 4..1) print(i) // prints nothing</div><div class="line">for (i in 4 downTo 1) print(i) // prints &quot;4321&quot;</div><div class="line">for (i in 1..4 step 2) print(i) // prints &quot;13&quot;</div><div class="line">for (i in 4 downTo 1 step 2) print(i) // prints &quot;42&quot;</div></pre></td></tr></table></figure>
<h3 id="具体方法重写成抽象方法"><a href="#具体方法重写成抽象方法" class="headerlink" title="具体方法重写成抽象方法"></a>具体方法重写成抽象方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">open class Base &#123;</div><div class="line">    open fun f() &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">abstract class Derived : Base() &#123;</div><div class="line">    override abstract fun f()</div><div class="line">&#125;</div><div class="line"></div><div class="line">class SubDerived:Derived() &#123;</div><div class="line">    override fun f() &#123;</div><div class="line">        TODO(&quot;not implemented&quot;) //To change body of created functions use File | Settings | File Templates.</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="8-不支持的"><a href="#8-不支持的" class="headerlink" title="8.不支持的"></a>8.不支持的</h2><h3 id="异常检查"><a href="#异常检查" class="headerlink" title="异常检查"></a>异常检查</h3><p>抛出异常后不会让你强制捕获异常。kotlin也支持在方法上抛出异常@Throws(Exception::class)<br>如果java调用该方法需要强制处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//kotlin调用java中有异常的方法</div><div class="line">var fileOutputStream:FileOutputStream = FileOutputStream(&quot;/out.txt&quot;)</div><div class="line">var byteArr:ByteArray = ByteArray(1024)</div><div class="line">fileOutputStream.write(byteArr)</div><div class="line">//kotlin定义一个会抛出异常的方法</div><div class="line">companion object &#123;</div><div class="line">        @Throws(Exception::class)</div><div class="line">        fun testGson() &#123;companion object &#123;</div><div class="line">        @Throws(Exception::class)</div><div class="line">        fun testGson() &#123;</div><div class="line">        ｝</div><div class="line">｝</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//java中调用kotlin中方法</div><div class="line">public void testInvokeKotlin() &#123;</div><div class="line">        try &#123;</div><div class="line">            GsonTest.Companion.testGson();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多与java比较<br><a href="https://kotlinlang.org/docs/reference/comparison-to-java.html" target="_blank" rel="external">https://kotlinlang.org/docs/reference/comparison-to-java.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-去掉findViewById&quot;&gt;&lt;a href=&quot;#1-去掉findViewById&quot; class=&quot;headerlink&quot; title=&quot;1.去掉findViewById&quot;&gt;&lt;/a&gt;1.去掉findViewById&lt;/h4&gt;&lt;p&gt;只需要在App Module
    
    </summary>
    
      <category term="kotlin" scheme="http://kotlin.xin/categories/kotlin/"/>
    
    
  </entry>
  
  <entry>
    <title>开发Android：基本语法</title>
    <link href="http://kotlin.xin/2017/05/25/Kotlin%E5%BC%80%E5%8F%91Android%EF%BC%9A%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://kotlin.xin/2017/05/25/Kotlin开发Android：基本语法/</id>
    <published>2017-05-24T16:27:15.000Z</published>
    <updated>2017-05-24T16:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>1.常量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val text:String = &quot;hell world!&quot;;</div></pre></td></tr></table></figure></p>
<p>2.变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var view:View   = LayoutInflater.from(this).inflate(R.layout.dialog_kotlin,null, false);</div></pre></td></tr></table></figure></p>
<p>3.可为空的变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var message:String? = &quot;this is a dialog message!&quot;;</div></pre></td></tr></table></figure></p>
<p>4.可以不指定类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var name: String? = null;</div><div class="line">var testName = &quot;test&quot;</div></pre></td></tr></table></figure></p>
<p>5.静态变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">companion object &#123;</div><div class="line">    var sText = &quot;companion text&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>1.定义函数(或方法)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fun onClickTest(view: View) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.定义带返回值的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fun onClickTest(view: View) :String &#123;</div><div class="line">    return &quot;&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.定义返回值可为空的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fun onClickTest(view: View) :String? &#123;</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>Kotlin类文件名为*.kt，一个类可以有（0或1）个主构造函数或多个次构造函数</p>
<p>#####主构造函数：<br>i.可以将主构造函数中参数申明成类中成员变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">open class Animal(var nameStr: String) &#123;</div><div class="line">        open fun test()&#123;</div><div class="line">            val testName = nameStr;</div><div class="line">        &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>ii.可以不作为成员变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">open class Food(name: String)&#123;</div><div class="line">        lateinit var mName:String;</div><div class="line">        init &#123;</div><div class="line">            mName = name;</div><div class="line">        &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h5 id="次构造函数："><a href="#次构造函数：" class="headerlink" title="次构造函数："></a>次构造函数：</h5><p>i.不能将次构造函数中参数申明成成员变量<br>如 以下是错误的</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2858322-9124150cdb687d88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-04-04 下午2.48.04.png"><br>ii.如果有主构造函数，次构造函数必须要实现主构造函数，对象构造后会调用init 代码块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">open class Food(name: String)&#123;</div><div class="line">        lateinit var mName:String;</div><div class="line">        init &#123;</div><div class="line">            mName = name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        constructor(nameStr: String, weight: Int) : this(nameStr) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>iii.子类的要实现父类的主构造函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">open class Animal(var nameStr: String) &#123;</div><div class="line">     open fun test()&#123;</div><div class="line">         val testName = nameStr;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> class Duck : Animal(&quot;鸭子&quot;) &#123;</div><div class="line">     override fun toString(): String &#123;</div><div class="line">         return &quot;name:&quot;+nameStr;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"></div><div class="line"> class Dog(var name: String) : Animal(nameStr = name) &#123;</div><div class="line">     override fun test()&#123;</div><div class="line">         val testName = nameStr;</div><div class="line">         this.name =&quot;&quot;;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> class Pig(name: String, weight: Int) : Animal(nameStr = name) &#123;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>Kotlin中内部类都是静态的，如以下内部类Food无法调用外部成员变量parentVar<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">class KotlinActivity : AppCompatActivity() &#123;</div><div class="line">    var parentVar:String = &quot;parent var&quot;;</div><div class="line">    </div><div class="line">    open class Food(name: String)&#123;</div><div class="line">        lateinit var mName:String;</div><div class="line">        init &#123;</div><div class="line">            mName = name;</div><div class="line">            mName = parentVar;</div><div class="line">            mName = KotlinActivity().parentVar;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        constructor(nameStr: String, weight: Int) : this(nameStr) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>非静态内部类，需要用inner标示，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">class GameActivity : Activity() &#123;</div><div class="line">    </div><div class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</div><div class="line">        super.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_game)</div><div class="line"></div><div class="line">        start.setOnClickListener &#123; gameView.start() &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun onScoreChanged(scoreValue: Int) &#123;</div><div class="line">        score.text = scoreValue.toString()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override fun onPause() &#123;</div><div class="line">        super.onPause()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    inner class Test&#123;</div><div class="line">        fun init()&#123;</div><div class="line">            var context = this@GameActivity.applicationContext;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">package com.ifnoif.game2048</div><div class="line"></div><div class="line">import android.app.Activity</div><div class="line">import android.os.Bundle</div><div class="line">import kotlinx.android.synthetic.main.activity_game.*</div><div class="line">import java.io.File</div><div class="line">import java.io.FileFilter</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by shen on 17/4/11.</div><div class="line"> */</div><div class="line"></div><div class="line">class GameActivity : Activity() &#123;</div><div class="line"></div><div class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</div><div class="line">        super.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_game)</div><div class="line"></div><div class="line">        start.setOnClickListener &#123; gameView.start() &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fun onScoreChanged(scoreValue: Int) &#123;</div><div class="line">        score.text = scoreValue.toString()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    override fun onPause() &#123;</div><div class="line">        super.onPause()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    inner class Test&#123;</div><div class="line">        fun init()&#123;</div><div class="line">            var context = this@GameActivity.applicationContext;</div><div class="line"></div><div class="line">            var fileFilter: FileFilter = FileFilter &#123; pathname: File -&gt; var end = &quot;.java&quot;; pathname.absolutePath.endsWith(end) &#125;</div><div class="line"></div><div class="line">            //实现kotlin中的接口，不能整成上面那种匿名内部类的方式，需采用下面的方法</div><div class="line">            var operation: Operation = object:Operation &#123;</div><div class="line">                override fun add(a: Int, b: Int): Int &#123;</div><div class="line">                    return a+b</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            //kotlin中的抽象类也不能生成匿名内部类</div><div class="line">            var add: Operation = object:Add() &#123;</div><div class="line">                override fun add(a: Int, b: Int): Int &#123;</div><div class="line">                    return a+b</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //抽象类</div><div class="line">    abstract class Add(): Operation&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //定义接口interface</div><div class="line">    open interface Operation &#123;</div><div class="line">        fun add(a: Int, b: Int): Int;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还可以使用typealias(声明函数类型别名)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">typealias Operate&lt;T&gt; = (a:T,b:T) -&gt; T</div><div class="line">fun init() &#123;</div><div class="line">    var operate: (Int, Int) -&gt; Int = &#123; a:Int, b:Int -&gt;a+b&#125;</div><div class="line">    operate.invoke(1,2)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;1.常量&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
    
    </summary>
    
      <category term="kotlin" scheme="http://kotlin.xin/categories/kotlin/"/>
    
    
  </entry>
  
  <entry>
    <title>开发Android：环境搭建</title>
    <link href="http://kotlin.xin/2017/05/25/Kotlin%E5%BC%80%E5%8F%91Android%EF%BC%9A%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://kotlin.xin/2017/05/25/Kotlin开发Android：环境搭建/</id>
    <published>2017-05-24T16:24:12.000Z</published>
    <updated>2017-05-24T16:47:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Android-Studio安装Kotlin插件"><a href="#1-Android-Studio安装Kotlin插件" class="headerlink" title="1.Android Studio安装Kotlin插件"></a>1.Android Studio安装Kotlin插件</h2><p>Android studio－&gt;Preferences－&gt;Plugin－&gt;搜索Kotlin并安装<br>AndroidStudio3.0已经自带插件了，当新建一个工程时，勾选kotlin支持，会自动添加kotlin依赖。因此推荐大家使用AS3.0或更高版本</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2858322-da018e89a7bcd9c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-04-04 下午12.22.07.png"></p>
<h2 id="2-编写KotlinActivity测试"><a href="#2-编写KotlinActivity测试" class="headerlink" title="2.编写KotlinActivity测试"></a>2.编写KotlinActivity测试</h2><p>项目右键创建Class的地方会有KotlinActivity</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2858322-cf0c631e16abf617.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-04-04 下午12.26.59.png"></p>
<p>创建后代码如下，与正常开发Android一样，在AndroidManifest.xml中加入Activity申明，就可以运行了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2858322-106cf6f3a3c368cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-04-04 下午12.29.05.png"></p>
<h2 id="3-Kotlin会自动配置Kotlin"><a href="#3-Kotlin会自动配置Kotlin" class="headerlink" title="3.Kotlin会自动配置Kotlin"></a>3.Kotlin会自动配置Kotlin</h2><p>工程module的build.gradle有以下改动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ext.kotlin_version = &apos;1.1.1&apos;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:2.2.3&apos;</div><div class="line"></div><div class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</div><div class="line"></div><div class="line">        // NOTE: Do not place your application dependencies here; they belong</div><div class="line">        // in the individual module build.gradle files</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>App module的build.gradle中主要有以下改动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;kotlin-android&apos;</div><div class="line">dependencies &#123;</div><div class="line">    compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:1.1.1&quot;//$kotlin_version</div><div class="line">&#125;</div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>开始开发kotlin之前，请先熟悉下一章：Kotlin基本语法</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Android-Studio安装Kotlin插件&quot;&gt;&lt;a href=&quot;#1-Android-Studio安装Kotlin插件&quot; class=&quot;headerlink&quot; title=&quot;1.Android Studio安装Kotlin插件&quot;&gt;&lt;/a&gt;1.Androi
    
    </summary>
    
      <category term="kotlin" scheme="http://kotlin.xin/categories/kotlin/"/>
    
    
  </entry>
  
  <entry>
    <title>是时候学习Kotlin了</title>
    <link href="http://kotlin.xin/2017/05/19/%E6%98%AF%E6%97%B6%E5%80%99%E5%AD%A6%E4%B9%A0Kotlin%E4%BA%86/"/>
    <id>http://kotlin.xin/2017/05/19/是时候学习Kotlin了/</id>
    <published>2017-05-19T12:31:12.000Z</published>
    <updated>2017-05-19T16:19:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>Kotlin火了，真的，以前我们搞kotlin只是野路子，商用项目中不提倡使用Kotlin，因为没有多少人愿意去了解，而我也只是在项目的测试模块中用用，解解渴，探探路。现在谷歌已经力挺Kotlin了，Kotlin成为Android开发语言的第一选择，相信你也迫不及待想要了解Kotlin了，接下来我们开始Kotlin 从入门到放弃之旅吧。</p>
<h4 id="Kotlin是啥"><a href="#Kotlin是啥" class="headerlink" title="Kotlin是啥"></a>Kotlin是啥</h4><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Kotlin是一种基于JVM的编程语言，和Java一样都是静态类型语言，由大名顶顶的JetBrains开发（JetBrains是Intellij idea的开发商，AndroidStudio也是他们和谷歌一起打造的）。</p>
<p>Kotlin 100%兼容Java，java开发的一些轮子，使用Kotlin开发的时候仍然能使用。没有使用Kotlin特性的功能，java也能无缝调用，这是Kotlin最大的一个优势。</p>
<h4 id="Kotlin-其他特性："><a href="#Kotlin-其他特性：" class="headerlink" title="Kotlin 其他特性："></a>Kotlin 其他特性：</h4><p>支持lambda，jdk1.8也可以支持了，Android开发使用1.8编译也能使用此功能，因此不加分</p>
<p>空安全：我们遇到的最频繁的坑，可能就是NPE了，而Kotlin能便捷的替我们避免NPE</p>
<p>扩展方法：可以为已有的类添加新的方法, 比继承更加简洁和优雅</p>
<p>数据类：POJO类，自动生成setter，getter，equals， hashCode。可以少写很多代码</p>
<p>扩展接口：类似jdk1.8中default方法，但是Android还不支持使用jdk中这个特性</p>
<p>Kotlin不是专门用来开发Android的，但是目前有很多Android项目 和 web服务端项目开始用Kotlin开发。同时kotlin能编译成javascript，因此也可以做网页开发</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://kotlinlang.org/" target="_blank" rel="external">Kotlin 官网</a></p>
<p><a href="https://github.com/huanglizhuo/kotlin-in-chinese?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">Kotlin中文文档</a></p>
<p><a href="http://www.infoq.com/cn/news/2015/06/Android-JVM-JetBrains-Kotlin" target="_blank" rel="external">Kotlin：Android世界的Swift</a></p>
<p><a href="https://www.zhihu.com/question/25289041" target="_blank" rel="external">如何评价 Kotlin 语言</a></p>
<p><a href="http://blog.csdn.net/mrseasons/article/details/47144519" target="_blank" rel="external">Kotlin与java交互</a></p>
<p><a href="http://www.indiepig.com/blog/kotlin-hello-js.php" target="_blank" rel="external">Kotlin与JavaScript</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;Kotlin火了，真的，以前我们搞kotlin只是野路子，商用项目中不提倡使用Kotlin，因为没有多少人愿意去了解，而我也只是在项目的测试
    
    </summary>
    
      <category term="kotlin" scheme="http://kotlin.xin/categories/kotlin/"/>
    
    
  </entry>
  
  <entry>
    <title>夏天来le</title>
    <link href="http://kotlin.xin/2017/05/19/%E5%A4%8F%E5%A4%A9%E6%9D%A5le/"/>
    <id>http://kotlin.xin/2017/05/19/夏天来le/</id>
    <published>2017-05-19T07:25:12.000Z</published>
    <updated>2017-06-12T13:40:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>天气越来越热了，连续几天35℃，尽管如此，我还是很喜欢北京的，比较少下雨，什么都方便，而我所从事的互联网行业，在北京也是如火如荼。</p>
<p><img alt="夏" src="/2017/05/19/夏天来le/img1.jpg" width="300"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;天气越来越热了，连续几天35℃，尽管如此，我还是很喜欢北京的，比较少下雨，什么都方便，而我所从事的互联网行业，在北京也是如火如荼。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;夏&quot; src=&quot;/2017/05/19/夏天来le/img1.jpg&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="杂" scheme="http://kotlin.xin/categories/%E6%9D%82/"/>
    
    
  </entry>
  
</feed>
